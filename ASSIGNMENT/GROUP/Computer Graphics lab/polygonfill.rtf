{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fswiss\fcharset0 Arial;}}
{\*\generator Msftedit 5.41.15.1515;}\viewkind4\uc1\pard\f0\fs20 Program to implement Polygon Filling Algorithm\par
\par
#include<stdio.h>\par
#include<conio.h>\par
#include<iostream.h>\par
#include<graphics.h>\par
#include<dos.h>\par
#include<stdlib.h>\par
\par
int gd=DETECT,gm;\par
\par
class myStack\par
\tab\{\par
        private:\par
\tab int arr[10000][2],top;\par
\tab public:\par
\tab myStack()\par
\tab\tab\{\par
\tab\tab top=-1;\par
\tab\tab\}\par
\tab void push(int x,int y)\par
\tab\tab\{\par
\tab\tab if(top>10000)\par
\tab\tab\tab\{\par
\tab\tab\tab printf("\par
a\tab " Stack Full...:-("");\par
\tab\tab\tab exit(0);\par
\tab\tab\tab\}\par
\tab\tab top++;\par
\tab\tab arr[top][0]=x;\par
\tab\tab arr[top][1]=y;\par
\tab\tab\}\par
\par
\tab void pop(int &x,int &y)\par
\tab\tab\{\par
\tab\tab x=arr[top][0];\par
\tab\tab y=arr[top][1];\par
\tab\tab top--;\par
\tab\tab\}\par
\par
\tab int empty(void)\par
\tab\tab\{\par
\tab\tab if(top==-1)\par
\tab\tab return(1);\par
\tab\tab else return(0);\par
\tab\tab\}\par
\tab\};\par
\par
void show_quadrant()\par
\tab\{\par
\tab cleardevice();\par
\tab rectangle(120,40,320,240);\par
\tab rectangle(320,40,520,240);\par
\tab rectangle(120,240,320,440);\par
\tab rectangle(320,240,520,440);\par
\tab for(int i=130;i<=510;i+=10)\par
\tab\tab\{\par
\tab\tab if(i==320)\par
\tab\tab continue;\par
\tab\tab outtextxy(i,237,"+");\par
\tab\tab\}\par
\tab for(i=50;i<=430;i+=10)\par
\tab\tab\{\par
\tab\tab if(i==240)\par
\tab\tab continue;\par
\tab\tab outtextxy(317,i,"-");\par
\tab\tab\}\par
\tab outtextxy(310,230,"O");\par
\tab outtextxy(530,240,"X");\par
\tab outtextxy(320,450,"-Y");\par
\tab outtextxy(100,240,"-X");\par
\tab outtextxy(320,30,"Y");\par
\tab\}\par
\par
\par
int get_poly(int ed[20])\par
\tab\{\par
\tab int edg,i,j;\par
\tab clearviewport();\par
        closegraph();\par
\tab cout<<"\par
\tab " Enter No. Of Edges ":=";\par
\tab cin>>edg;\par
\tab for(i=0,j=1;i<2*edg;i+=2,j++)\par
\tab\tab\{\par
\tab\tab cout<<"\par
\tab\tab " Enter Vertex No. "<<j<<" ":= ";\par
\tab\tab flushall();\par
\tab\tab cin>>ed[i]>>ed[i+1];\par
\tab\tab ed[i]+=320;\par
\tab\tab ed[i+1]=240-ed[i+1];\par
\tab\tab\}\par
\tab ed[i]=ed[0];\par
\tab ed[i+1]=ed[1];\par
\tab initgraph(&gd,&gm,"..\\bgi");\par
\tab clearviewport();\par
\tab show_quadrant();\par
\tab drawpoly(edg+1,ed);\par
\tab return(edg);\par
\tab\}\par
\par
void get_y(int &min,int &max,int edge[20],int size)\par
\tab\{\par
\tab int i;\par
\tab min=480;\par
\tab max=0;\par
\tab for(i=1;i<2*size;i+=2)\par
\tab\tab\{\par
\tab\tab if(edge[i]>max)\par
\tab\tab max=edge[i];\par
\tab\tab if(edge[i]<min)\par
\tab\tab min=edge[i];\par
\tab\tab\}\par
\tab\}\par
\par
void get_x(int &min,int &max,int edge[20],int size)\par
\tab\{\par
\tab int i;\par
\tab min=480;\par
\tab max=0;\par
\tab for(i=0;i<2*size;i+=2)\par
\tab\tab\{\par
\tab\tab if(edge[i]>max)\par
\tab\tab max=edge[i];\par
\tab\tab if(edge[i]<min)\par
\tab\tab min=edge[i];\par
\tab\tab\}\par
\tab\}\par
\par
void fill_polygon(int x,int y,int fg,int bg)\par
\tab\{\par
\tab myStack stack;\par
\tab int col;\par
\tab putpixel(x,y,fg);\par
\tab stack.push(x,y);\par
\tab while(!stack.empty())\par
\tab\tab\{\par
\tab\tab stack.pop(x,y);\par
\tab\tab col=getpixel(x,y);\par
\tab\tab if(col!=bg&&col!=fg)\par
\tab\tab putpixel(x,y,fg);\par
\tab\tab col=getpixel(x,y+1);\par
\tab\tab if(col!=bg&&col!=fg)\par
\tab\tab stack.push(x,y+1);\par
\tab\tab col=getpixel(x+1,y);\par
\tab\tab if(col!=bg&&col!=fg)\par
\tab\tab stack.push(x+1,y);\par
\tab\tab col=getpixel(x-1,y);\par
\tab\tab if(col!=bg&&col!=fg)\par
\tab\tab stack.push(x-1,y);\par
\tab\tab col=getpixel(x,y-1);\par
\tab\tab if(col!=bg&&col!=fg)\par
\tab\tab stack.push(x,y-1);\par
\tab\tab\}\par
\tab\}\par
\par
\par
void flood_fill(int ed[20])\par
\tab\{\par
\tab int i,j,x,y,num,bg,fg,col,k;\par
\tab clearviewport();\par
        closegraph();\par
\tab cout<<"\par
\tab " Enter No Of Edges ":= ";\par
\tab cin>>num;\par
\tab for(i=0,k=1;i<2*num;i+=2,k++)\par
\tab\tab\{\par
\tab\tab cout<<"\par
\tab " Enter The Vertex No "<<k<<" ":=";\par
\tab\tab flushall();\par
\tab\tab cin>>ed[i]>>ed[i+1];\par
\tab\tab ed[i]+=320;\par
\tab\tab ed[i+1]=240-ed[i+1];\par
\tab\tab\}\par
\tab ed[i]=ed[0];\par
\tab ed[i+1]=ed[1];\par
\tab cout<<"\par
\tab " Enter The Seed Point (x,y) ":= ";\par
\tab cin>>x>>y;\par
\tab x+=320;\par
\tab y=240-y;\par
        initgraph(&gd,&gm,"..\\bgi");\par
        cleardevice();\par
\tab show_quadrant();\par
\tab setcolor(1);\par
\tab drawpoly(num+1,ed);\par
\tab fill_polygon(x,y,15,1);\par
\tab\}\par
\par
int check_mid(int i,int ed[20],int k)\par
\tab\{\par
\tab int max,min;\par
\tab if(ed[k+1]>ed[k+3])\par
\tab\tab\{\par
\tab\tab max=ed[k+1];\par
\tab\tab min=ed[k+3];\par
\tab\tab\}\par
\tab if(ed[k+1]<ed[k+3])\par
\tab\tab\{\par
\tab\tab max=ed[k+3];\par
\tab\tab min=ed[k+1];\par
\tab\tab\}\par
\tab if(i>min&&i<max)\par
\tab return(1);\par
\tab else\par
\tab return(0);\par
\tab\}\par
\par
void scan_poly(int ed[20],int num)\par
\tab\{\par
\tab int i,j,k,xmax,xmin,ymax,ymin,p;\par
\tab void sort(float xi[10],int n);\par
\tab float xi[10];\par
\tab get_y(ymin,ymax,ed,num);\par
\tab get_x(xmin,xmax,ed,num);\par
\tab for(i=ymin;i<=ymax;i++)\par
\tab\tab\{\par
\tab\tab p=0;\par
\tab\tab for(k=0;k<2*num;k+=2)\par
\tab\tab\tab\{\par
\tab\tab\tab if(ed[k+1]==ed[k+3])\par
\tab\tab\tab continue;\par
xi[p] = ed[k]+((double)((double)(i-ed[k+1])/(ed[k+1]-ed[k+3]))*(ed[k]-ed[k+2]));\par
\tab\tab\tab if(xi[p]>=xmin&&xi[p]<=xmax)\par
\tab\tab\tab p++;\par
\tab\tab\tab\}\par
\tab\tab sort(xi,p);\par
\tab\tab for(j=0;j<p;j+=2)\par
\tab\tab line(xi[j],i,xi[j+1],i);\par
\tab\tab\}\par
\tab\}\par
\par
void sort(float xi[10],int n)\par
\tab\{\par
\tab int i,j;\par
\tab for(i=0;i<n-1;i++)\par
\tab\tab\{\par
\tab\tab for(j=0;j<n-1;j++)\par
\tab\tab\tab\{\par
\tab\tab\tab if(xi[j]>xi[j+1])\par
\tab\tab\tab\tab\{\par
\tab\tab\tab\tab float temp;\par
\tab\tab\tab\tab temp=xi[j];\par
\tab\tab\tab\tab xi[j]=xi[j+1];\par
\tab\tab\tab\tab xi[j+1]=temp;\par
\tab\tab\tab\tab\}\par
\tab\tab\tab\}\par
\tab        \}\par
\tab\}\par
\par
void edge_fill(int ed[20],int num)\par
\tab\{\par
\tab int i,j,k,xmax,xmin,ymax,ymin,col;\par
\tab double xint;\par
\tab get_y(ymin,ymax,ed,num);\par
\tab get_x(xmin,xmax,ed,num);\par
\tab for(k=0;k<2*num;k+=2)\par
\tab\tab\{\par
\tab\tab for(i=ymin;i<=ymax;i++)\par
\tab\tab\tab\{\par
\tab\tab\tab if(ed[k+1]==ed[k+3])\par
\tab\tab\tab continue;\par
\tab\tab\tab if(!check_mid(i,ed,k))\par
\tab\tab\tab continue;\par
xint = ed[k]+(((double)(i-ed[k+1])/(ed[k+1]-ed[k+3]))*(ed[k]-ed[k+2]));\par
\tab\tab\tab for(j=xmin;j<=xmax;j++)\par
\tab\tab\tab\tab\{\par
\tab\tab\tab\tab if(j>xint)\par
\tab\tab\tab\tab\tab\{\par
\tab\tab\tab\tab\tab col=getpixel(j,i);\par
\tab\tab\tab\tab\tab if(col==15)\par
\tab\tab\tab\tab\tab putpixel(j,i,0);\par
\tab\tab\tab\tab\tab if(col==0)\par
\tab\tab\tab\tab\tab putpixel(j,i,15);\par
\tab\tab\tab\tab\tab\}\par
\tab\tab\tab\tab\}\par
\tab\tab\tab\}\par
\tab\tab\}\par
\tab\}\par
\par
void main()\par
\tab\{\par
\tab clrscr();\par
\tab char *mess[]=\{"-","=","["," ","P","o","l","y","g","o","n"," ",\par
\tab\tab       "F","i","l","l","i","n","g"," ","]","=","-",\};\par
\tab int xx=28,xxx=51,i,j;\par
\tab _setcursortype(_NOCURSOR);\par
\tab for(i=0,j=22;i<13,j>=11;i++,j--)\par
\tab\tab\{\par
\tab\tab gotoxy(xx,1);\par
\tab\tab cout<<mess[i];\par
\tab\tab xx++;\par
\tab\tab gotoxy(xxx,1);\par
\tab\tab cout<<mess[j];\par
\tab\tab xxx--;\par
\tab\tab delay(50);\par
\tab\tab\}\par
\tab xx=30;xxx=49;\par
        int choice,ed[20],num;\par
\tab _setcursortype(_NORMALCURSOR);\par
\tab cout<<"\par
\par
\par
\tab\tab 1:==>" Flood Fill "";\par
\tab cout<<"\par
\par
\tab\tab 2:==>" Ordered Edge List Fill "";\par
\tab cout<<"\par
\par
\tab\tab 3:==>" Edge Fill "";\par
\tab cout<<"\par
\par
\tab\tab 4:==>" Exit "";\par
\tab cout<<"\par
\par
\tab\tab " Enter Your Choice ":=";\par
\tab cin>>choice;\par
\tab initgraph(&gd,&gm,"..\\bgi");\par
\tab clearviewport();\par
\tab switch(choice)\par
\tab\tab\{\par
\tab\tab case 1:\par
\tab\tab\tab flood_fill(ed);\par
\tab\tab\tab getch();\par
\tab\tab\tab break;\par
\par
\tab\tab case 2:\par
\tab\tab\tab num=get_poly(ed);\par
\tab\tab\tab scan_poly(ed,num);\par
\tab\tab\tab getch();\par
\tab\tab\tab break;\par
\par
\tab\tab case 3:\par
\tab\tab\tab num=get_poly(ed);\par
\tab\tab\tab edge_fill(ed,num);\par
\tab\tab\tab getch();\par
\tab\tab\tab break;\par
\par
\tab\tab case 4:\par
\tab\tab\tab exit(0);\par
\par
                default:\par
                \tab cout<<"\par
\tab a" Press A Valid Key...!!! "";\par
                        getch();\par
                        main();\par
                        break;\par
\tab\tab\}\par
\tab closegraph();\par
\tab\}\par
}
 